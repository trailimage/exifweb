{"version":3,"sources":["lazy-load.js"],"names":["defaultOptions","src","srcset","selector","root","rootMargin","threshold","LazyLoad","images","options","jQuery","extend","this","length","document","querySelectorAll","window","IntersectionObserver","observe","console","warn","forEach","loadImage","prototype","swapImage","e","isIntersecting","target","_this","observer","entries","el","getAttribute","log","tagName","toLowerCase","img","style","backgroundImage","$_1","fn","lazyload","makeArray"],"mappings":"AAAA,aAIA,IAAIA,eAAiB,CACjBC,IAAK,WACLC,OAAQ,cACRC,SAAU,YACVC,KAAM,KACNC,WAAY,MACZC,UAAW,GAMXC,SAA0B,WAC1B,SAASA,EAASC,EAAQC,QACN,IAAZA,IAAsBA,EAAU,IACpCC,OAAOC,OAAOC,KAAKH,QAASA,EAAST,gBACrCY,KAAKJ,OACe,EAAhBA,EAAOK,OACDL,EACAM,SAASC,iBAAiBH,KAAKH,QAAQN,UAC7Ca,OAAOC,qBACPL,KAAKM,WAILC,QAAQC,KAAK,iDACbR,KAAKJ,OAAOa,QAAQT,KAAKU,YAiCjC,OA9BAf,EAASgB,UAAUC,UAAY,SAAUC,GACjCA,EAAEC,gBACFd,KAAKU,UAAUG,EAAEE,SAGzBpB,EAASgB,UAAUL,QAAU,WACzB,IAAIU,EAAQhB,KACZA,KAAKiB,SAAW,IAAIZ,qBAAqB,SAAUa,GAAW,OAAOA,EAAQT,QAAQO,EAAMJ,YAAe,CACtGpB,KAAMQ,KAAKH,QAAQL,KACnBC,WAAYO,KAAKH,QAAQJ,WACzBC,UAAWM,KAAKH,QAAQH,aAGhCC,EAASgB,UAAUD,UAAY,SAAUS,GACrC,IAAI9B,EAAM8B,EAAGC,aAAapB,KAAKH,QAAQR,KAEvC,GADAkB,QAAQc,IAAIhC,GACoB,OAA5B8B,EAAGG,QAAQC,cAAwB,CACnC,IAAIC,EAAML,EACN7B,EAASkC,EAAIJ,aAAapB,KAAKH,QAAQP,QAC/B,OAARD,IACAmC,EAAInC,IAAMA,GAEC,OAAXC,IACAkC,EAAIlC,OAASA,QAIjB6B,EAAGM,MAAMC,gBAAkB,OAASrC,EAAM,KAG3CM,EA/CkB,GAkD7B,GADAY,QAAQc,IAAI,aACRvB,OAAQ,CACR,IAAI6B,IAAM7B,OACV6B,IAAIC,GAAGC,SAAW,SAAUhC,GAExB,OADA,IAAIF,SAASgC,IAAIG,UAAU9B,MAAOH,GAC3BG","file":"../lazy-load.js","sourcesContent":["\"use strict\";\n/// <reference types=\"jquery\" />\n/// <reference path=\"../types/jquery/index.d.ts\" />\n/// <reference path=\"./browser.d.ts\"/>\nvar defaultOptions = {\n    src: 'data-src',\n    srcset: 'data-srcset',\n    selector: '.lazyload',\n    root: null,\n    rootMargin: '0px',\n    threshold: 0\n};\n/**\n * Based on Lazy Load plugin by Mika Tuupola.\n * @see https://appelsiini.net/projects/lazyload\n */\nvar LazyLoad = /** @class */ (function () {\n    function LazyLoad(images, options) {\n        if (options === void 0) { options = {}; }\n        jQuery.extend(this.options, options, defaultOptions);\n        this.images =\n            images.length > 0\n                ? images\n                : document.querySelectorAll(this.options.selector);\n        if (window.IntersectionObserver) {\n            this.observe();\n        }\n        else {\n            // pre-load all image if no observer available\n            console.warn('Browser does not support IntersectionObserver');\n            this.images.forEach(this.loadImage);\n        }\n    }\n    LazyLoad.prototype.swapImage = function (e) {\n        if (e.isIntersecting) {\n            this.loadImage(e.target);\n        }\n    };\n    LazyLoad.prototype.observe = function () {\n        var _this = this;\n        this.observer = new IntersectionObserver(function (entries) { return entries.forEach(_this.swapImage); }, {\n            root: this.options.root,\n            rootMargin: this.options.rootMargin,\n            threshold: this.options.threshold\n        });\n    };\n    LazyLoad.prototype.loadImage = function (el) {\n        var src = el.getAttribute(this.options.src);\n        console.log(src);\n        if (el.tagName.toLowerCase() == 'img') {\n            var img = el;\n            var srcset = img.getAttribute(this.options.srcset);\n            if (src !== null) {\n                img.src = src;\n            }\n            if (srcset !== null) {\n                img.srcset = srcset;\n            }\n        }\n        else {\n            el.style.backgroundImage = \"url(\" + src + \")\";\n        }\n    };\n    return LazyLoad;\n}());\nconsole.log('attaching');\nif (jQuery) {\n    var $_1 = jQuery;\n    $_1.fn.lazyload = function (options) {\n        new LazyLoad($_1.makeArray(this), options);\n        return this;\n    };\n}\n"]}