{"version":3,"file":"../responsive.js","sources":["responsive.js"],"sourcesContent":["\"use strict\";\n/// <reference types=\"jquery\" />\n/// <reference path=\"../types/jquery/index.d.ts\" />\n/// <reference path=\"./browser.d.ts\"/>\n/// <reference path=\"./util.ts\"/>\n/**\n * Only load scripts and data for the current view port and features.\n */\n$(function () {\n    /** Whether mobile resources have been loaded */\n    var mobileLoaded = false;\n    /** Whether desktop resources have been loaded */\n    var desktopLoaded = false;\n    var $view = $(window);\n    var timer = 0;\n    /** Page width below which mobile rather than desktop resources will be loaded */\n    var breakAt = 1024;\n    // default features\n    var feature = {\n        facebook: false,\n        timestamp: 0,\n    };\n    // incorporate features set by page\n    $.extend(feature, pageFeatures);\n    $view.on('resize', resizeHandler);\n    // always check on first load\n    checkResources();\n    /**\n     * Load different resources if view size crosses break boundary\n     */\n    function resizeHandler() {\n        if (mobileLoaded && desktopLoaded) {\n            // no need to check after everything is loaded\n            $view.off('resize');\n        }\n        else {\n            if (timer > 0)\n                window.clearTimeout(timer);\n            timer = window.setTimeout(checkResources, 500);\n        }\n    }\n    /**\n     * Load resources based on current view width.\n     */\n    function checkResources() {\n        var width = $view.width();\n        if (width === undefined || width > breakAt) {\n            loadDesktop();\n        }\n        else {\n            loadMobile();\n        }\n    }\n    /**\n     * Lazy-load mobile resources\n     */\n    function loadMobile() {\n        if (mobileLoaded)\n            return;\n        var imageStyle = { width: '100%', height: 'auto' };\n        // could be optimized into a lazy-load\n        $('#mobile-menu').load('/mobile-menu?t=' + feature.timestamp, function () {\n            $.getScript('/js/mobile-menu.js?t=' + feature.timestamp);\n        });\n        // make post images fill width\n        $('figure, .category.content a.thumb').each(function () {\n            $(this).css(imageStyle).find('img').css(imageStyle);\n        });\n        mobileLoaded = true;\n    }\n    /**\n     * Lazy-load desktop resources. Append timestamp to break caches.\n     */\n    function loadDesktop() {\n        if (desktopLoaded) {\n            return;\n        }\n        // could be optimized into a lazy-load\n        $('#category-menu')\n            .load('/category-menu?t=' + feature.timestamp)\n            .on('change', 'select', function (e) {\n            window.location.assign($(e.target).val());\n        });\n        if (feature.facebook) {\n            loadSource('facebook-jssdk', '//connect.facebook.net/en_US/all.js#xfbml=1&appId=110860435668134', true);\n        }\n        desktopLoaded = true;\n    }\n    /**\n     * jQuery getScript() might work but this is the pattern both Facebook and\n     * Twitter employ.\n     */\n    function loadSource(id, url, async) {\n        if (async === void 0) { async = false; }\n        var js;\n        var firstScript = document.getElementsByTagName('script')[0];\n        if (!document.getElementById(id)) {\n            if (async === undefined)\n                async = false;\n            js = document.createElement('script');\n            js.id = id;\n            js.src = url;\n            js.async = async;\n            var parent_1 = firstScript.parentNode;\n            if (parent_1 === null) {\n                console.error('Failed to load script source');\n            }\n            else {\n                parent_1.insertBefore(js, firstScript);\n            }\n        }\n    }\n});\n\"use strict\";\n/// <reference types=\"jquery\" />\n/// <reference path=\"../types/mapbox-gl/index.d.ts\" />\n/// <reference path=\"../types/jquery/index.d.ts\"/>\nvar util = {\n    setting: {\n        /**\n         * Save setting to browser storage.\n         *\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/Storage/LocalStorage\n         */\n        save: function (key, value) {\n            if (!window.localStorage)\n                return;\n            localStorage.setItem(key, value);\n        },\n        /**\n         * Load setting from browser storage.\n         */\n        load: function (key) {\n            if (!window.localStorage)\n                return null;\n            return localStorage.getItem(key);\n        },\n        set showMapLegend(value) {\n            util.setting.save('map-legend', value ? 'true' : 'false');\n        },\n        get showMapLegend() {\n            var value = util.setting.load('map-legend');\n            return value ? value == 'true' : true;\n        },\n        /**\n         * Value is array of root and sub-category names.\n         */\n        set menuCategory(selected) {\n            if (typeof selected === 'string') {\n                selected = [selected, null];\n            }\n            if (selected !== null) {\n                util.setting.save('menu', selected.join());\n            }\n        },\n        get menuCategory() {\n            var value = util.setting.load('menu');\n            return value === null ? null : value[1].split(',');\n        },\n    },\n    html: {\n        /**\n         * Generate Google material icon HTML with optional click handler.\n         *\n         * @see https://material.io/icons/\n         */\n        icon: function (name, handler) {\n            var $icon = $('<i>')\n                .addClass('material-icons ' + name)\n                .text(name);\n            if (handler !== undefined)\n                $icon.click(handler);\n            return $icon;\n        },\n    },\n};\n"],"names":["$","mobileLoaded","desktopLoaded","$view","window","timer","breakAt","feature","facebook","timestamp","checkResources","width","undefined","load","on","e","location","assign","target","val","id","url","async","js","firstScript","document","getElementsByTagName","getElementById","createElement","src","parent_1","parentNode","console","error","insertBefore","loadSource","imageStyle","height","getScript","each","this","css","find","extend","pageFeatures","off","clearTimeout","setTimeout","util","setting","save","key","value","localStorage","setItem","getItem","showMapLegend","menuCategory","selected","join","split","html","icon","name","handler","$icon","addClass","text","click"],"mappings":"AAAA,aAQAA,EAAE,WAEE,IAAIC,GAAe,EAEfC,GAAgB,EAChBC,EAAQH,EAAEI,QACVC,EAAQ,EAERC,EAAU,KAEVC,EAAU,CACVC,UAAU,EACVC,UAAW,GAwBf,SAASC,IACL,IAAIC,EAAQR,EAAMQ,cACJC,IAAVD,GAA+BL,EAARK,EA2B/B,WACI,GAAIT,EACA,OAGJF,EAAE,kBACGa,KAAK,oBAAsBN,EAAQE,WACnCK,GAAG,SAAU,SAAU,SAAUC,GAClCX,OAAOY,SAASC,OAAOjB,EAAEe,EAAEG,QAAQC,SAEnCZ,EAAQC,UAShB,SAAoBY,EAAIC,EAAKC,QACX,IAAVA,IAAoBA,GAAQ,GAChC,IAAIC,EACAC,EAAcC,SAASC,qBAAqB,UAAU,GAC1D,IAAKD,SAASE,eAAeP,GAAK,MAChBR,IAAVU,IACAA,GAAQ,IACZC,EAAKE,SAASG,cAAc,WACzBR,GAAKA,EACRG,EAAGM,IAAMR,EACTE,EAAGD,MAAQA,EACX,IAAIQ,EAAWN,EAAYO,WACV,OAAbD,EACAE,QAAQC,MAAM,gCAGdH,EAASI,aAAaX,EAAIC,IAxB9BW,CAAW,iBAAkB,qEAAqE,GAEtGjC,GAAgB,GA9BpB,WACI,GAAID,EACA,OACJ,IAAImC,EAAa,CAAEzB,MAAO,OAAQ0B,OAAQ,QAE1CrC,EAAE,gBAAgBa,KAAK,kBAAoBN,EAAQE,UAAW,WAC1DT,EAAEsC,UAAU,wBAA0B/B,EAAQE,aAGlDT,EAAE,qCAAqCuC,KAAK,WACxCvC,EAAEwC,MAAMC,IAAIL,GAAYM,KAAK,OAAOD,IAAIL,KAE5CnC,GAAe,MA7CnBD,EAAE2C,OAAOpC,EAASqC,cAClBzC,EAAMW,GAAG,SAMT,WACQb,GAAgBC,EAEhBC,EAAM0C,IAAI,WAGE,EAARxC,GACAD,OAAO0C,aAAazC,GACxBA,EAAQD,OAAO2C,WAAWrC,EAAgB,QAZlDA,MA2FJ,IAAIsC,KAAO,CACPC,QAAS,CAMLC,KAAM,SAAUC,EAAKC,GACZhD,OAAOiD,cAEZA,aAAaC,QAAQH,EAAKC,IAK9BvC,KAAM,SAAUsC,GACZ,OAAK/C,OAAOiD,aAELA,aAAaE,QAAQJ,GADjB,MAGfK,kBAAkBJ,GACdJ,KAAKC,QAAQC,KAAK,aAAcE,EAAQ,OAAS,UAErDI,oBACI,IAAIJ,EAAQJ,KAAKC,QAAQpC,KAAK,cAC9B,OAAOuC,GAAiB,QAATA,GAKnBK,iBAAiBC,GACW,iBAAbA,IACPA,EAAW,CAACA,EAAU,OAET,OAAbA,GACAV,KAAKC,QAAQC,KAAK,OAAQQ,EAASC,SAG3CF,mBACI,IAAIL,EAAQJ,KAAKC,QAAQpC,KAAK,QAC9B,OAAiB,OAAVuC,EAAiB,KAAOA,EAAM,GAAGQ,MAAM,OAGtDC,KAAM,CAMFC,KAAM,SAAUC,EAAMC,GAClB,IAAIC,EAAQjE,EAAE,OACTkE,SAAS,kBAAoBH,GAC7BI,KAAKJ,GAGV,YAFgBnD,IAAZoD,GACAC,EAAMG,MAAMJ,GACTC"}